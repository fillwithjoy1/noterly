def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'com.google.gms.google-services' // FIREBASE
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    // compileSdkVersion flutter.compileSdkVersion
    // compileSdkVersion 33 // FLUTTER_LOCAL_NOTIFICATIONS
    compileSdkVersion rootProject.ext.compileSdkVersion // BACKGROUND_FETCH && FLUTTER_LOCAL_NOTIFICATIONS
    ndkVersion flutter.ndkVersion

    compileOptions {
        coreLibraryDesugaringEnabled true // FLUTTER_LOCAL_NOTIFICATIONS

        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        multiDexEnabled true // FLUTTER_LOCAL_NOTIFICATIONS

        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "uk.co.tdsstudios.noterly"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-build-configuration.
        // minSdkVersion flutter.minSdkVersion
        minSdkVersion 19 // FIREBASE
        // targetSdkVersion flutter.targetSdkVersion
        // targetSdkVersion 33 // FLUTTER_LOCAL_NOTIFICATIONS
        targetSdkVersion rootProject.ext.targetSdkVersion // BACKGROUND_FETCH && FLUTTER_LOCAL_NOTIFICATIONS
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    signingConfigs {
       release {
           keyAlias keystoreProperties['keyAlias']
           keyPassword keystoreProperties['keyPassword']
           storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
           storePassword keystoreProperties['storePassword']
       }
   }
   buildTypes {
       release {
           signingConfig signingConfigs.release

            // Added in attempt to fix Crashlytics error (flutter cannot build for x86 32-bit so disabling here) 
           ndk {
                abiFilters 'armeabi-v7a','arm64-v8a','x86_64'
           }
       }
   }
}

flutter {
    source '../..'
}

dependencies {
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5' // FLUTTER_LOCAL_NOTIFICATIONS
    implementation 'androidx.window:window:1.0.0' // FLUTTER_LOCAL_NOTIFICATIONS
    implementation 'androidx.window:window-java:1.0.0' // FLUTTER_LOCAL_NOTIFICATIONS
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    // FIREBASE:
    implementation platform('com.google.firebase:firebase-bom:31.2.0')
    implementation 'com.google.firebase:firebase-analytics-ktx'
}
